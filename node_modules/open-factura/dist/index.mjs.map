{"version":3,"sources":["../src/services/authorization.ts","../src/services/generateInvoice.ts","../src/utils/utils.ts","../src/services/reception.ts","../src/services/signing.ts"],"sourcesContent":["import { createClient, Client } from \"soap\";\n\nexport async function documentAuthorization(\n  accesKey: string,\n  authorizationUrl: string\n) {\n  let params = { claveAccesoComprobante: accesKey };\n\n  let authorizationResponse: any;\n\n  const authorizationRequest = new Promise((resolve, reject) => {\n    createClient(authorizationUrl, (err: any, client: Client) => {\n      client.autorizacionComprobante(params, (err: any, result: unknown) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  });\n\n  authorizationResponse = await authorizationRequest;\n\n  return authorizationResponse;\n}\n","import { create } from \"xmlbuilder2\";\nimport { Invoice, InvoiceInput } from \"../baseData/invoice/invoice\";\nimport { generateAccessKey } from \"../utils/utils\";\n\nexport function generateInvoiceXml(invoice: Invoice) {\n  const document = create(invoice);\n  const xml = document.end({ prettyPrint: true });\n  return xml;\n}\n\nexport function generateInvoice(invoiceData: InvoiceInput) {\n  const accessKey = generateAccessKey({\n    date: new Date(invoiceData.infoFactura.fechaEmision),\n    codDoc: invoiceData.infoTributaria.codDoc,\n    ruc: invoiceData.infoTributaria.ruc,\n    environment: invoiceData.infoTributaria.ambiente,\n    establishment: invoiceData.infoTributaria.estab,\n    emissionPoint: invoiceData.infoTributaria.ptoEmi,\n    sequential: invoiceData.infoTributaria.secuencial,\n  });\n\n  const invoice: Invoice = {\n    factura: {\n      \"@xmlns:ds\": \"http://www.w3.org/2000/09/xmldsig#\",\n      \"@xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\",\n      \"@id\": \"comprobante\",\n      \"@version\": \"1.0.0\",\n      infoTributaria: { ...invoiceData.infoTributaria, claveAcceso: accessKey },\n      infoFactura: invoiceData.infoFactura,\n      detalles: invoiceData.detalles,\n    },\n  };\n\n  return { invoice, accessKey };\n}\n","export type GenerateAccessKey = {\n  date: Date;\n  /*\n  FACTURA 01\n  LIQUIDACIÓN DE COMPRA DE\n  BIENES Y PRESTACIÓN DE\n  SERVICIOS 03\n  NOTA DE CRÉDITO 04\n  NOTA DE DÉBITO 05\n  GUÍA DE REMISIÓN 06\n  COMPROBANTE DE RETENCIÓN 07\n  */\n  codDoc: \"01\" | \"03\" | \"04\" | \"05\" | \"06\" | \"07\";\n  ruc: string;\n  environment: \"1\" | \"2\";\n  establishment: string;\n  emissionPoint: string;\n  sequential: string;\n};\n\nexport function generateAccessKey(accessKeyData: GenerateAccessKey) {\n  let accessKey = \"\";\n  accessKey += formatDateToDDMMYYYY(accessKeyData.date); // Fecha de emisión\n  accessKey += accessKeyData.codDoc; // Tipo de comprobante\n  accessKey += accessKeyData.ruc; // Número de RUC\n  accessKey += accessKeyData.environment; // Tipo de ambiente\n  accessKey += accessKeyData.establishment; // Establecimiento\n  accessKey += accessKeyData.emissionPoint; // Punto de emision\n  accessKey += accessKeyData.sequential; // Secuencial\n  accessKey += generateRandomEightDigitNumber(); // Código numérico\n  accessKey += \"1\"; // Tipo de emisión\n  accessKey += generateVerificatorDigit(accessKey); // Dígito verificador\n  return accessKey;\n}\n\nfunction formatDateToDDMMYYYY(date: Date) {\n  let day = date.getDate();\n  let month = date.getMonth() + 1; // getMonth() returns 0-11\n  let year = date.getFullYear();\n\n  // Pad day and month with a leading zero if they are less than 10\n  const finalDay = day < 10 ? \"0\" + day : day;\n  const finalMonth = month < 10 ? \"0\" + month : month;\n\n  return `${finalDay}${finalMonth}${year}`;\n}\n\nfunction generateRandomEightDigitNumber(): number {\n  const min = 10000000;\n  const max = 99999999;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction generateVerificatorDigit(accessKey: string) {\n  let result = 0;\n  let addition = 0;\n  let multiple = 7;\n  for (let i = 0; i < accessKey.length; i++) {\n    addition += parseInt(accessKey.charAt(i)) * multiple;\n    multiple > 2 ? multiple-- : (multiple = 7);\n  }\n  result = 11 - (addition % 11);\n  result === 10 ? (result = 1) : (result = result);\n  result === 11 ? (result = 0) : (result = result);\n  return result;\n}\n","import { createClient, Client } from \"soap\";\n\nexport async function documentReception(\n  stringXML: string,\n  receptionUrl: string\n): Promise<any> {\n  const base64XML = Buffer.from(stringXML).toString(\"base64\");\n  let params = { xml: base64XML };\n\n  let receptionResult: any;\n\n  const receptionRequest = new Promise((resolve, reject) => {\n    createClient(receptionUrl, (err, client: Client) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      client.validarComprobante(params, (err: any, result: unknown) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  });\n\n  receptionResult = await receptionRequest;\n  return receptionResult;\n}\n","import * as forge from \"node-forge\";\nimport { readFileSync } from \"fs\";\nimport fetch from \"node-fetch\";\n\nexport function getP12FromLocalFile(path: string) {\n  const file = readFileSync(path);\n  const buffer = file.buffer.slice(\n    file.byteOffset,\n    file.byteOffset + file.byteLength\n  );\n  return buffer;\n}\n\nexport async function getP12FromUrl(url: string) {\n  const file = await fetch(url)\n    .then((response) => response.arrayBuffer())\n    .then((data) => data);\n  return file;\n}\n\nexport function getXMLFromLocalFile(path: string) {\n  const file = readFileSync(path, \"utf8\");\n  return file;\n}\n\nexport async function getXMLFromLocalUrl(url: string) {\n  const file = await fetch(url)\n    .then((response) => response.text())\n    .then((data) => data);\n  return file;\n}\n\nfunction sha1Base64(text: string, encoding: forge.Encoding = \"utf8\") {\n  let md = forge.md.sha1.create();\n  md.update(text, encoding);\n  const hash = md.digest().toHex();\n  const buffer = Buffer.from(hash, \"hex\");\n  const base64 = buffer.toString(\"base64\");\n  return base64;\n}\n\nfunction hexToBase64(hex: string) {\n  hex = hex.padStart(hex.length + (hex.length % 2), \"0\");\n  const bytes = hex.match(/.{2}/g)!.map((byte) => parseInt(byte, 16));\n  return btoa(String.fromCharCode(...bytes));\n}\n\nfunction bigIntToBase64(bigInt: number) {\n  const hex = bigInt.toString(16);\n  const hexPairs = hex.match(/\\w{2}/g);\n  const bytes = hexPairs!.map((pair) => parseInt(pair, 16));\n  const byteString = String.fromCharCode(...bytes);\n  const base64 = btoa(byteString);\n  const formatedBase64 = base64.match(/.{1,76}/g)!.join(\"\\n\");\n  return formatedBase64;\n}\n\nfunction getRandomNumber(min = 990, max = 9999) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport async function signXml(\n  p12Data: ArrayBuffer,\n  p12Password: string,\n  xmlData: string\n) {\n  const arrayBuffer = p12Data;\n  let xml = xmlData;\n  xml = xml.replace(/\\s+/g, \" \");\n  xml = xml.trim();\n  xml = xml.replace(/(?<=\\>)(\\r?\\n)|(\\r?\\n)(?=\\<\\/)/g, \"\");\n  xml = xml.trim();\n  xml = xml.replace(/(?<=\\>)(\\s*)/g, \"\");\n\n  const arrayUint8 = new Uint8Array(arrayBuffer);\n  const base64 = forge.util.binary.base64.encode(arrayUint8);\n  const der = forge.util.decode64(base64);\n\n  const asn1 = forge.asn1.fromDer(der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(asn1, p12Password);\n  const pkcs8Bags = p12.getBags({\n    bagType: forge.pki.oids.pkcs8ShroudedKeyBag,\n  });\n  const certBags = p12.getBags({\n    bagType: forge.pki.oids.certBag,\n  });\n  const certBag = certBags[(forge as any).oids.certBag];\n\n  const friendlyName = certBag![1].attributes.friendlyName[0];\n\n  let certificate;\n  let pkcs8;\n  let issuerName = \"\";\n\n  const cert = certBag!.reduce((prev, curr) => {\n    const attributes = curr.cert!.extensions;\n    return attributes.length > prev.cert!.extensions.length ? curr : prev;\n  });\n\n  const issueAttributes = cert.cert!.issuer.attributes;\n\n  issuerName = issueAttributes\n    .reverse()\n    .map((attribute) => {\n      return `${attribute.shortName}=${attribute.value}`;\n    })\n    .join(\", \");\n\n  if (/BANCO CENTRAL/i.test(friendlyName)) {\n    let keys = pkcs8Bags[(forge as any).oids.pkcs8ShroudedKeyBag];\n    for (let i = 0; i < keys!.length; i++) {\n      const element = keys![i];\n      let name = element.attributes.friendlyName[0];\n      if (/Signing Key/i.test(name)) {\n        pkcs8 = pkcs8Bags[(forge as any).oids.pkcs8ShroudedKeyBag[i]];\n      }\n    }\n  }\n\n  if (/SECURITY DATA/i.test(friendlyName)) {\n    pkcs8 = pkcs8Bags[(forge as any).oids.pkcs8ShroudedKeyBag]![0];\n  }\n\n  certificate = cert.cert;\n\n  const notBefore = certificate!.validity[\"notBefore\"];\n  const notAfter = certificate!.validity[\"notAfter\"];\n  const date = new Date();\n\n  if (date < notBefore || date > notAfter) {\n    throw new Error(\"Expired certificate\");\n  }\n\n  const key = (pkcs8 as any).key ?? (pkcs8 as any).asn1;\n  const certificateX509_pem = forge.pki.certificateToPem(certificate!);\n\n  let certificateX509 = certificateX509_pem;\n  certificateX509 = certificateX509.substr(certificateX509.indexOf(\"\\n\"));\n  certificateX509 = certificateX509.substr(\n    0,\n    certificateX509.indexOf(\"\\n-----END CERTIFICATE-----\")\n  );\n\n  certificateX509 = certificateX509\n    .replace(/\\r?\\n|\\r/g, \"\")\n    .replace(/([^\\0]{76})/g, \"$1\\n\");\n\n  const certificateX509_asn1 = forge.pki.certificateToAsn1(certificate!);\n  const certificateX509_der = forge.asn1.toDer(certificateX509_asn1).getBytes();\n  const hash_certificateX509_der = sha1Base64(certificateX509_der, \"utf8\");\n  const certificateX509_serialNumber = parseInt(certificate!.serialNumber, 16);\n\n  const exponent = hexToBase64(key.e.data[0].toString(16));\n  const modulus = bigIntToBase64(key.n);\n\n  xml = xml.replace(/\\t|\\r/g, \"\");\n\n  const sha1_xml = sha1Base64(\n    xml.replace('<?xml version=\"1.0\" encoding=\"UTF-8\"?>', \"\"),\n    \"utf8\"\n  );\n\n  const nameSpaces =\n    'xmlns:ds=\"http://www.w3.org/2000/09/xmldisg#\" xmlns:etsi=\"http://uri.etsi.org/01903/v1.3.2#\"';\n\n  const certificateNumber = getRandomNumber();\n  const signatureNumber = getRandomNumber();\n  const signedPropertiesNumber = getRandomNumber();\n  const signedInfoNumber = getRandomNumber();\n  const signedPropertiesIdNumber = getRandomNumber();\n  const referenceIdNumber = getRandomNumber();\n  const signatureValueNumber = getRandomNumber();\n  const objectNumber = getRandomNumber();\n\n  const isoDateTime = date.toISOString().slice(0, 19);\n\n  let signedProperties = \"\";\n  signedProperties +=\n    '<etsi:SignedProperties Id=\"Signature' +\n    signatureNumber +\n    \"-SignedProperties\" +\n    signedPropertiesNumber +\n    '\">';\n\n  signedProperties += \"<etsi:SignedSignatureProperties>\";\n  signedProperties += \"<etsi:SigningTime>\";\n  signedProperties += isoDateTime;\n  signedProperties += \"</etsi:SigningTime>\";\n  signedProperties += \"<etsi:SigningCertificate>\";\n  signedProperties += \"<etsi:Cert>\";\n  signedProperties += \"<etsi:CertDigest>\";\n  signedProperties +=\n    '<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">';\n  signedProperties += \"</ds:DigestMethod>\";\n  signedProperties += \"<ds:DigestValue>\";\n  signedProperties += hash_certificateX509_der;\n  signedProperties += \"</ds:DigestValue>\";\n  signedProperties += \"</etsi:CertDigest>\";\n  signedProperties += \"<etsi:IssuerSerial>\";\n  signedProperties += \"<ds:X509IssuerName>\";\n  signedProperties += issuerName;\n  signedProperties += \"</ds:X509IssuerName>\";\n  signedProperties += \"<ds:X509SerialNumber>\";\n  signedProperties += certificateX509_serialNumber;\n  signedProperties += \"</ds:X509SerialNumber>\";\n  signedProperties += \"</etsi:IssuerSerial>\";\n  signedProperties += \"</etsi:Cert>\";\n  signedProperties += \"</etsi:SigningCertificate>\";\n  signedProperties += \"</etsi:SignedSignatureProperties>\";\n\n  signedProperties += \"<etsi:SignedDataObjectProperties>\";\n  signedProperties +=\n    '<etsi:DataObjectFormat ObjectReference=\"#Reference-ID=' +\n    referenceIdNumber +\n    '\">';\n  signedProperties += \"<etsi:Description>\";\n  signedProperties += \"contenido comprobante\";\n  signedProperties += \"</etsi:Description>\";\n  signedProperties += \"<etsi:MimeType>\";\n  signedProperties += \"text/xml\";\n  signedProperties += \"</etsi:MimeType>\";\n  signedProperties += \"</etsi:DataObjectFormat>\";\n  signedProperties += \"</etsi:SignedDataObjectProperties>\";\n  signedProperties += \"</etsi:SignedProperties>\";\n\n  const sha1SignedProperties = sha1Base64(\n    signedProperties.replace(\n      \"<ets:SignedProperties\",\n      \"<etsi:SignedProperties \" + nameSpaces\n    ),\n    \"utf8\"\n  );\n\n  let keyInfo = \"\";\n  keyInfo += '<ds:KeyInfo Id=\"Certificate' + certificateNumber + '\">';\n  keyInfo += \"\\n<ds:X509Data>\";\n  keyInfo += \"\\n<ds:X509Certificate>\\n\";\n  keyInfo += certificateX509;\n  keyInfo += \"\\n</ds:X509Certificate>\";\n  keyInfo += \"\\n</ds:X509Data>\";\n  keyInfo += \"\\n<ds:KeyValue>\";\n  keyInfo += \"\\n<ds:RSAKeyValue>\";\n  keyInfo += \"\\n<ds:Modulus>\\n\";\n  keyInfo += modulus;\n  keyInfo += \"\\n</ds:Modulus>\";\n  keyInfo += \"\\n<ds:Exponent>\\n\";\n  keyInfo += exponent;\n  keyInfo += \"\\n</ds:Exponent>\";\n  keyInfo += \"\\n</ds:RSAKeyValue>\";\n  keyInfo += \"\\n</ds:KeyValue>\";\n  keyInfo += \"\\n</ds:KeyInfo>\";\n\n  const sha1KeyInfo = sha1Base64(\n    keyInfo.replace(\"<ds:KeyInfo\", \"<ds:KeyInfo \" + nameSpaces),\n    \"utf8\"\n  );\n\n  let signedInfo = \"\";\n  signedInfo +=\n    '<ds:SignedInfo Id=\"Signature-SignedInfo' + signedInfoNumber + '\">';\n  signedInfo +=\n    '\\n<ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\">';\n  signedInfo += \"</ds:CanonicalizationMethod>\";\n  signedInfo +=\n    '\\n<ds:SignatureMethod Algorith=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\">';\n  signedInfo += \"</ds:SignatureMethod>\";\n  signedInfo +=\n    '\\n<ds:Reference Id=\"SignedPropertiesID' +\n    signedPropertiesIdNumber +\n    '\" Type=\"http://uri.etsi.org/01903#SignedProperties\" URI=\"#Signature' +\n    signatureNumber +\n    \"-SignedProperties\" +\n    signedPropertiesNumber +\n    '\">';\n  signedInfo +=\n    '\\n<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">';\n  signedInfo += \"</ds:DigestMethod>\";\n  signedInfo += \"\\n<ds:DigestValue>\";\n  signedInfo += sha1SignedProperties;\n  signedInfo += \"</ds:DigestValue>\";\n  signedInfo += \"\\n</ds:Reference>\";\n  signedInfo += '\\n<ds:Reference URI=\"#Certificate' + certificateNumber + '\">';\n  signedInfo +=\n    '\\n<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">';\n  signedInfo += \"</ds:DigestMethod>\";\n  signedInfo += \"\\n<ds:DigestValue>\";\n  signedInfo += sha1KeyInfo;\n  signedInfo += \"</ds:DigestValue>\";\n  signedInfo += \"\\n</ds:Reference>\";\n\n  signedInfo +=\n    '\\n<ds:Reference Id=\"Reference-ID' +\n    referenceIdNumber +\n    '\" URI=\"#comprobante\">';\n  signedInfo += \"\\n<ds:Transforms>\";\n  signedInfo +=\n    '\\n<ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmlndsig#enveloped-signature\">';\n  signedInfo += \"</ds:Transform>\";\n  signedInfo += \"\\n</ds:Transforms>\";\n  signedInfo +=\n    '\\n<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">';\n  signedInfo += \"</ds:DigestMethod>\";\n  signedInfo += \"\\n<ds:DigestValue>\";\n  signedInfo += sha1_xml;\n  signedInfo += \"</ds:DigestValue>\";\n  signedInfo += \"\\n</ds:Reference>\";\n\n  signedInfo += \"\\n</ds:SignedInfo>\";\n\n  const canonicalizedSignedInfo = signedInfo.replace(\n    \"<ds:SignedInfo\",\n    \"<ds:SignedInfo \" + nameSpaces\n  );\n\n  const md = forge.md.sha1.create();\n  md.update(canonicalizedSignedInfo, \"utf8\");\n\n  const signature = btoa(\n    key\n      .sign(md)\n      .match(/.{1,76}/g)\n      .join(\"\\n\")\n  );\n\n  let xadesBes = \"\";\n  xadesBes +=\n    \"<ds:Signature \" + nameSpaces + ' Id=\"Signature' + signatureNumber + '\">';\n  xadesBes += \"\\n\" + signedInfo;\n\n  xadesBes +=\n    '\\n<ds:SignatureValue Id=\"SignatureValue' + signatureValueNumber + '\">\\n';\n\n  xadesBes += signature;\n  xadesBes += \"\\n</ds:SignatureValue>\";\n  xadesBes += \"\\n\" + keyInfo;\n  xadesBes +=\n    '\\n<ds:Object Id=\"Signature' +\n    signatureNumber +\n    \"-Object\" +\n    objectNumber +\n    '\">';\n\n  xadesBes +=\n    '<etsi:QualifyingProperties Target=\"#Signature' + signatureNumber + '\">';\n  xadesBes += signedProperties;\n\n  xadesBes += \"</etsi:QualifyingProperties>\";\n  xadesBes += \"</ds:Object>\";\n  xadesBes += \"</ds:Signature>\";\n\n  return xml.replace(/(<[^<]+)$/, xadesBes + \"$1\");\n}\n"],"mappings":"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","names":["err","createClient","err","md","asn1"]}